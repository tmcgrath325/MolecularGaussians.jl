# These kind of plots will probably be generated by MolecularGraph.jl eventually

import MakieCore: plot!
using MakieCore: @recipe, Theme
using GaussianMixtureAlignment: gmmdisplay, DEFAULT_COLORS
using MolecularGraph: stick!, colortype, Color

const FEATURE_COLORS = Dict(
    :Donor         => MolecularGraph.Color(255, 0,   255),  # magenta
    :Acceptor      => MolecularGraph.Color(0,   255, 0  ),  # green
    :PosIonizable  => MolecularGraph.Color(255, 0,   0  ),  # red
    :NegIonizable  => MolecularGraph.Color(0,   0,   255),  # blue
    :Hydrophobe    => MolecularGraph.Color(0,   255, 255),  # cyan
    :Ring          => MolecularGraph.Color(255, 128, 255),  # orange
    :AromaticRing  => MolecularGraph.Color(255, 64,  0  ),  # brown
    :Volume        => MolecularGraph.Color(128, 128, 128),  # grey
)

@recipe(MolGMMDisplay, p) do scene
    Theme(
        display = :wire,
        color = nothing,
        palette = DEFAULT_COLORS,
        colors = FEATURE_COLORS,
        show_mol = true,
        mol_fun = stick!,
    )
end

function pharmacophoredisplay(args...; kwargs...)
    set_theme!(backgroundcolor = :black)
    figaxplot = molgmmdisplay(args...; kwargs...)
    figaxplot.axis.show_axis[] = false
    return figaxplot
end

function plot!(md::MolGMMDisplay{<:NTuple{<:Any,<:MolGMM{N,T,K}}}) where {N,T,K}
    gmms = [md[i][] for i=1:length(md)]
    len = length(gmms)
    disp = md[:display][]
    color = md[:color][]
    palette = md[:palette][]
    for (i,gmm) in enumerate(gmms)
        col = isnothing(color) ? palette[(i-1) % len + 1] : color
        col  = isa(col, Color) ? colortype(col) : col
        gmmdisplay!(md, gmm; display=disp, color=col)
    end
    if md[:show_mol][]
        molfun = md[:mol_fun][]
        for gmm in gmms
            molfun(md, gmm.graph)
        end
    end
end

function plot!(md::MolGMMDisplay{<:NTuple{<:Any,<:PharmacophoreGMM{N,T,K}}}) where {N,T,K}
    mgmms = [md[i][] for i=1:length(md)]
    disp = md[:display][]
    color = md[:color][]
    colors = md[:colors][]
    palette = md[:palette][]
    allkeys = Set{K}()
    for mgmm in mgmms
        allkeys = allkeys âˆª keys(mgmm.gmms)
    end
    len = length(allkeys)
    for (i,k) in enumerate(allkeys)
        col = isnothing(color) ? (haskey(colors, k) ? colors[k] : palette[(i-1) % len + 1]) : color
        col  = isa(col, Color) ? colortype(col) : col
        for mgmm in mgmms
            haskey(mgmm.gmms, k) && gmmdisplay!(md, mgmm.gmms[k]; display=disp, color=col, palette=palette)
        end
    end
    if md[:show_mol][]
        molfun = md[:mol_fun][]
        for gmm in mgmms
            molfun(md, gmm.graph)
        end
    end
    return md
end